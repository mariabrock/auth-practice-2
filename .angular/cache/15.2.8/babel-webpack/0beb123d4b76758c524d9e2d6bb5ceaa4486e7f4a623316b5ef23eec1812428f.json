{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nimport * as i3 from \"@angular/forms\";\nexport class AuthComponent {\n  constructor(authService, router) {\n    this.authService = authService;\n    this.router = router;\n    this.inLoginMode = true;\n    this.isLoading = false;\n    this.error = null;\n  }\n  onSwitch() {\n    this.inLoginMode = !this.inLoginMode;\n  }\n  onSubmit(form) {\n    if (!form.valid) {\n      return;\n    }\n    const email = form.value.email;\n    const password = form.value.password;\n    console.log(email, password);\n    let authObservable;\n    // in order to not repeat our code, we make a new observable\n    this.isLoading = true;\n    if (this.inLoginMode) {\n      authObservable = this.authService.login(email, password);\n    } else {\n      authObservable = this.authService.signup(email, password);\n    }\n    authObservable.subscribe({\n      next: resData => {\n        console.log(resData);\n        this.isLoading = false;\n        this.router.navigate(['/dashboard']);\n      },\n      error: errorMessage => {\n        console.error(errorMessage);\n        this.error = errorMessage;\n        this.isLoading = false;\n      }\n    });\n    // the subscriptions for login and sign up now line in their own observable => authObservable\n    // because we are doing the same things on login and sign up we simply reference the observable\n    // this helps us to control loading state and set any errors\n    form.reset();\n  }\n}\nAuthComponent.ɵfac = function AuthComponent_Factory(t) {\n  return new (t || AuthComponent)(i0.ɵɵdirectiveInject(i1.AuthService), i0.ɵɵdirectiveInject(i2.Router));\n};\nAuthComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AuthComponent,\n  selectors: [[\"app-auth\"]],\n  decls: 20,\n  vars: 3,\n  consts: [[1, \"container\"], [1, \"row\"], [1, \"col-xs-12\", \"col-md-6\", \"col-md-offset-3\"], [3, \"ngSubmit\"], [\"authForm\", \"ngForm\"], [1, \"form-group\"], [\"for\", \"email\"], [\"type\", \"email\", \"id\", \"email\", \"name\", \"email\", \"email\", \"\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [\"for\", \"password\"], [\"type\", \"password\", \"id\", \"password\", \"name\", \"password\", \"minlength\", \"6\", \"ngModel\", \"\", \"required\", \"\", 1, \"form-control\"], [1, \"mt-2\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\", 3, \"disabled\"], [\"type\", \"button\", 1, \"btn\", \"btn-info\", 3, \"click\"]],\n  template: function AuthComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      const _r1 = i0.ɵɵgetCurrentView();\n      i0.ɵɵelementStart(0, \"div\", 0)(1, \"div\", 1)(2, \"div\", 2)(3, \"div\", 0)(4, \"form\", 3, 4);\n      i0.ɵɵlistener(\"ngSubmit\", function AuthComponent_Template_form_ngSubmit_4_listener() {\n        i0.ɵɵrestoreView(_r1);\n        const _r0 = i0.ɵɵreference(5);\n        return i0.ɵɵresetView(ctx.onSubmit(_r0));\n      });\n      i0.ɵɵelementStart(6, \"div\", 5)(7, \"label\", 6);\n      i0.ɵɵtext(8, \"Email\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(9, \"input\", 7);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(10, \"div\", 5)(11, \"label\", 8);\n      i0.ɵɵtext(12, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(13, \"input\", 9);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(14, \"div\", 10)(15, \"button\", 11);\n      i0.ɵɵtext(16);\n      i0.ɵɵelementEnd();\n      i0.ɵɵtext(17, \" | \");\n      i0.ɵɵelementStart(18, \"button\", 12);\n      i0.ɵɵlistener(\"click\", function AuthComponent_Template_button_click_18_listener() {\n        return ctx.onSwitch();\n      });\n      i0.ɵɵtext(19);\n      i0.ɵɵelementEnd()()()()()()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(5);\n      i0.ɵɵadvance(15);\n      i0.ɵɵproperty(\"disabled\", !_r0.valid);\n      i0.ɵɵadvance(1);\n      i0.ɵɵtextInterpolate1(\" \", ctx.inLoginMode ? \"Login\" : \"Sign Up\", \" \");\n      i0.ɵɵadvance(3);\n      i0.ɵɵtextInterpolate1(\" Switch to \", ctx.inLoginMode ? \"Sign Up\" : \"Login\", \" \");\n    }\n  },\n  dependencies: [i3.ɵNgNoValidate, i3.DefaultValueAccessor, i3.NgControlStatus, i3.NgControlStatusGroup, i3.RequiredValidator, i3.MinLengthValidator, i3.EmailValidator, i3.NgModel, i3.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";;;;AAWA,OAAM,MAAOA,aAAa;EAKxBC,YAAoBC,WAAwB,EACxBC,MAAc;IADd,gBAAW,GAAXD,WAAW;IACX,WAAM,GAANC,MAAM;IAL1B,gBAAW,GAAG,IAAI;IAClB,cAAS,GAAG,KAAK;IACjB,UAAK,GAAW,IAAK;EAGgB;EAErCC,QAAQ;IACN,IAAI,CAACC,WAAW,GAAG,CAAC,IAAI,CAACA,WAAW;EACtC;EAEAC,QAAQ,CAACC,IAAY;IACnB,IAAI,CAACA,IAAI,CAACC,KAAK,EAAE;MACf;;IAEF,MAAMC,KAAK,GAAGF,IAAI,CAACG,KAAK,CAACD,KAAK;IAC9B,MAAME,QAAQ,GAAGJ,IAAI,CAACG,KAAK,CAACC,QAAQ;IACpCC,OAAO,CAACC,GAAG,CAACJ,KAAK,EAAEE,QAAQ,CAAC;IAE5B,IAAIG,cAA4C;IAChD;IAEA,IAAI,CAACC,SAAS,GAAG,IAAI;IAErB,IAAI,IAAI,CAACV,WAAW,EAAE;MACpBS,cAAc,GAAG,IAAI,CAACZ,WAAW,CAACc,KAAK,CAACP,KAAK,EAAEE,QAAQ,CAAC;KACzD,MAAM;MACLG,cAAc,GAAG,IAAI,CAACZ,WAAW,CAACe,MAAM,CAACR,KAAK,EAAEE,QAAQ,CAAC;;IAG3DG,cAAc,CAACI,SAAS,CAAC;MACvBC,IAAI,EAAGC,OAAO,IAAI;QAChBR,OAAO,CAACC,GAAG,CAACO,OAAO,CAAC;QACpB,IAAI,CAACL,SAAS,GAAG,KAAK;QACtB,IAAI,CAACZ,MAAM,CAACkB,QAAQ,CAAC,CAAC,YAAY,CAAC,CAAC;MACtC,CAAC;MACDC,KAAK,EAAGC,YAAY,IAAI;QACtBX,OAAO,CAACU,KAAK,CAACC,YAAY,CAAC;QAC3B,IAAI,CAACD,KAAK,GAAGC,YAAY;QACzB,IAAI,CAACR,SAAS,GAAG,KAAK;MACxB;KACD,CAAC;IACF;IACA;IACA;IACAR,IAAI,CAACiB,KAAK,EAAE;EACd;;AA/CWxB,aAAa;mBAAbA,aAAa;AAAA;AAAbA,aAAa;QAAbA,aAAa;EAAAyB;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;;MCX1BC,8BAAuB;MAIUA;QAAAA;QAAA;QAAA,OAAYA,gCAAkB;MAAA,EAAC;MACpDA,8BAAwB;MACHA,qBAAK;MAAAA,iBAAQ;MAChCA,2BAIqB;MACvBA,iBAAM;MACRA,+BAAwB;MACAA,yBAAQ;MAAAA,iBAAQ;MACtCA,4BAKE;MACJA,iBAAM;MACNA,gCAAkB;MAEhBA,aACF;MAAAA,iBAAS;MACTA,oBACA;MAAAA,mCAAgE;MAArBA;QAAA,OAASC,cAAU;MAAA,EAAC;MAC7DD,aACF;MAAAA,iBAAS;;;;MANqCA,gBAA4B;MAA5BA,qCAA4B;MACxEA,eACF;MADEA,sEACF;MAGEA,eACF;MADEA,gFACF","names":["AuthComponent","constructor","authService","router","onSwitch","inLoginMode","onSubmit","form","valid","email","value","password","console","log","authObservable","isLoading","login","signup","subscribe","next","resData","navigate","error","errorMessage","reset","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/3rb/workspace/learning/practice/auth/auth-practice-2/src/app/auth/auth.component.ts","/Users/3rb/workspace/learning/practice/auth/auth-practice-2/src/app/auth/auth.component.html"],"sourcesContent":["import { Component } from \"@angular/core\";\nimport { NgForm } from \"@angular/forms\";\nimport { AuthResponseData, AuthService } from \"./auth.service\";\nimport { Router } from \"@angular/router\";\nimport { Observable } from \"rxjs\";\n\n@Component({\n  selector: 'app-auth',\n  templateUrl: './auth.component.html',\n  styleUrls: ['./auth.component.css']\n})\nexport class AuthComponent {\n  inLoginMode = true;\n  isLoading = false;\n  error: string = null!;\n\n  constructor(private authService: AuthService,\n              private router: Router) {}\n\n  onSwitch() {\n    this.inLoginMode = !this.inLoginMode;\n  }\n\n  onSubmit(form: NgForm) {\n    if (!form.valid) {\n      return;\n    }\n    const email = form.value.email;\n    const password = form.value.password;\n    console.log(email, password)\n\n    let authObservable: Observable<AuthResponseData>;\n    // in order to not repeat our code, we make a new observable\n\n    this.isLoading = true;\n\n    if (this.inLoginMode) {\n      authObservable = this.authService.login(email, password);\n    } else {\n      authObservable = this.authService.signup(email, password);\n    }\n\n    authObservable.subscribe({\n      next: (resData) => {\n        console.log(resData);\n        this.isLoading = false;\n        this.router.navigate(['/dashboard']);\n      },\n      error: (errorMessage) => {\n        console.error(errorMessage);\n        this.error = errorMessage;\n        this.isLoading = false;\n      },\n    });\n    // the subscriptions for login and sign up now line in their own observable => authObservable\n    // because we are doing the same things on login and sign up we simply reference the observable\n    // this helps us to control loading state and set any errors\n    form.reset();\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"row\">\n    <div class=\"col-xs-12 col-md-6 col-md-offset-3\">\n      <div class=\"container\">\n        <form #authForm=\"ngForm\" (ngSubmit)=\"onSubmit(authForm)\">\n            <div class=\"form-group\">\n              <label for=\"email\">Email</label>\n              <input\n                type=\"email\" id=\"email\"\n                class=\"form-control\"\n                name=\"email\" email\n                ngModel required />\n            </div>\n          <div class=\"form-group\">\n            <label for=\"password\">Password</label>\n            <input\n              type=\"password\" id=\"password\"\n              class=\"form-control\"\n              name=\"password\" minlength=\"6\"\n              ngModel required\n            />\n          </div>\n          <div class=\"mt-2\">\n          <button class=\"btn btn-primary\" type=\"submit\" [disabled]=\"!authForm.valid\">\n            {{ inLoginMode ? 'Login' : 'Sign Up' }}\n          </button>\n          |\n          <button class=\"btn btn-info\" type=\"button\" (click)=\"onSwitch()\">\n            Switch to {{ inLoginMode ? 'Sign Up' : 'Login' }}\n          </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}