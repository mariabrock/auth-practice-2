{"ast":null,"code":"import { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport { User } from '../shared/user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class AuthService {\n  constructor(http, router) {\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n  signup(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBqAvHJslal2P8fVJ1-DHO9DSM2ughplbg', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  login(email, password) {\n    return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBqAvHJslal2P8fVJ1-DHO9DSM2ughplbg', {\n      email: email,\n      password: password,\n      returnSecureToken: true\n    }).pipe(catchError(this.handleError), tap(resData => {\n      this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n    }));\n  }\n  logout() {\n    this.user.next(null);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if (this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n  handleError(errorRes) {\n    let errorMessage = 'Oops. An unknown error has occurred.';\n    if (!errorRes.error || !errorRes.error.error) {\n      return throwError(() => errorMessage);\n    }\n    switch (errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'Sorry, that email already exists. Please login instead!';\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(() => errorMessage);\n  }\n  handleAuthentication(email, userId, token, expiresIn) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n}\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["BehaviorSubject","catchError","tap","throwError","User","AuthService","constructor","http","router","signup","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","login","logout","user","next","navigate","localStorage","removeItem","tokenExpirationTimer","clearTimeout","errorRes","errorMessage","error","message","userId","token","expirationDate","Date","getTime","setItem","JSON","stringify","factory","providedIn"],"sourceRoot":"","sources":["/Users/3rb/workspace/learning/practice/auth/auth-practice-2/src/app/auth/auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpErrorResponse } from \"@angular/common/http\";\nimport { Router } from \"@angular/router\";\nimport { BehaviorSubject, catchError, tap, throwError } from \"rxjs\";\nimport { User } from '../shared/user.model';\n\nexport interface AuthResponseData {\n  kind: string;\n  idToken:\tstring;\n  username:\tstring;\n  email: string;\n  refreshToken:\tstring;\n  expiresIn:\tstring;\n  localId:\tstring;\n  registered?: boolean;\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  user = new BehaviorSubject<User>(null!);\n  private tokenExpirationTimer: any;\n\n  constructor(private http: HttpClient, private router: Router) { }\n\n  signup(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyBqAvHJslal2P8fVJ1-DHO9DSM2ughplbg',\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        })\n      .pipe(catchError(this.handleError),\n        tap(resData => {\n          this.handleAuthentication(resData.email, resData.localId,resData.idToken, +resData.expiresIn)\n        })\n      );\n  }\n\n  login(email: string, password: string) {\n    return this.http\n      .post<AuthResponseData>(\n        'https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyBqAvHJslal2P8fVJ1-DHO9DSM2ughplbg',\n        {\n          email: email,\n          password: password,\n          returnSecureToken: true\n        }\n      )\n      .pipe(catchError(this.handleError),\n        tap(resData => {\n          this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn)\n        })\n      );\n  }\n\n  logout() {\n    this.user.next(null!);\n    this.router.navigate(['/auth']);\n    localStorage.removeItem('userData');\n    if(this.tokenExpirationTimer) {\n      clearTimeout(this.tokenExpirationTimer);\n    }\n    this.tokenExpirationTimer = null;\n  }\n\n  private handleError(errorRes: HttpErrorResponse) {\n    let errorMessage = 'Oops. An unknown error has occurred.';\n    if(!errorRes.error || !errorRes.error.error) {\n      return throwError(() => errorMessage);\n    }\n    switch(errorRes.error.error.message) {\n      case 'EMAIL_EXISTS':\n        errorMessage = 'Sorry, that email already exists. Please login instead!'\n        break;\n      case 'EMAIL_NOT_FOUND':\n        errorMessage = 'This email does not exist.';\n        break;\n      case 'INVALID_PASSWORD':\n        errorMessage = 'This password is not correct.';\n        break;\n    }\n    return throwError(() => errorMessage);\n  }\n\n  private handleAuthentication(email: string,  userId: string,  token: string, expiresIn: number) {\n    const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n    const user = new User(email, userId, token, expirationDate);\n    this.user.next(user);\n    localStorage.setItem('userData', JSON.stringify(user));\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}